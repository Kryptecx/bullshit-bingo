<!DOCTYPE html>
<html lang="de">
<head>
  <meta charset="UTF-8">
  <title>Bullshit Bingo</title>
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link rel="stylesheet" href="/styles.css">
  <style>
    body {
      margin: 0;
      font-family: Arial, sans-serif;
      background-color: #121212;
      color: #EEEEEE;
      text-align: center;
    }

    h1 {
      margin-top: 40px;
    }

    .card-container {
      display: flex;
      flex-wrap: wrap;
      justify-content: center;
      gap: 20px;
      padding: 40px;
    }

    .card {
      width: 200px;
      height: 200px;
      border-radius: 20px;
      overflow: hidden;
      background-size: cover;
      background-position: center;
      box-shadow: 0 0 15px rgba(0,0,0,0.5);
      display: flex;
      align-items: end;
      justify-content: center;
      color: #EEEEEE;
      font-weight: bold;
      font-size: 18px;
      cursor: pointer;
      position: relative;
      transition: transform 0.2s ease;
    }

    .card:hover {
      transform: scale(1.05);
      background-color: #333333;
    }

    .card::after {
      content: "";
      position: absolute;
      inset: 0;
      background: linear-gradient(to top, rgba(0,0,0,0.7), rgba(0,0,0,0));
    }

    .card span {
      position: relative;
      z-index: 1;
      padding: 10px;
    }

    /* Modal Styles */
    .modal {
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background-color: rgba(0,0,0,0.7);
      display: none;
      justify-content: center;
      align-items: center;
      z-index: 1000;
    }

    .modal-content {
      background: #1e1e1e;
      padding: 30px;
      border-radius: 12px;
      text-align: center;
      color: white;
      box-shadow: 0 0 20px rgba(0,0,0,0.8);
    }

    .modal-content button {
      margin: 10px;
      padding: 10px 20px;
      font-size: 16px;
      border: none;
      border-radius: 8px;
      cursor: pointer;
    }

    .confirm-btn {
      background-color: #4caf50;
      color: white;
    }

    .cancel-btn {
      background-color: #888;
      color: white;
    }
@media (max-width: 768px) {
  .card-container {
    flex-direction: column;
    align-items: center;
    padding: 20px;
  }

  .card {
    width: 90vw;
    height: 140px;
    font-size: 16px;
  }

  .modal-content {
    width: 80vw;
  }
}

@media (max-width: 400px) {
  .card {
    height: 120px;
    font-size: 14px;
  }

  h1 {
    font-size: 24px;
  }
}
  </style>
</head>
<body>
  <h1>Bingo</h1>
  <p>Wähle eine Show:</p>

  <div class="card-container">
    <% shows.forEach(show => { 
         const image = `/images/${show.toLowerCase().replace(/\s+/g, '-')}.jpg`;
    %>
      <div class="card" style="background-image: url('<%= image %>')" onclick="openModal('<%= show %>')">
        <span><%= show %></span>
      </div>
    <% }) %>
  </div>

  <!-- Modal -->
  <div class="modal" id="confirmModal">
    <div class="modal-content">
      <p id="modalText">Spiel starten?</p>
      <button class="confirm-btn" onclick="startGame()">Ja</button>
      <button class="cancel-btn" onclick="closeModal()">Abbrechen</button>
    </div>
  </div>

  <script>
    let selectedShow = '';

    function openModal(show) {
      selectedShow = show;
      document.getElementById('modalText').textContent = `Spiel starten für "${show}"?`;
      document.getElementById('confirmModal').style.display = 'flex';
    }

    function closeModal() {
      document.getElementById('confirmModal').style.display = 'none';
    }

    function startGame() {
      window.location.href = `/play/${encodeURIComponent(selectedShow)}`;
    }
  </script>

<!-- Link zum Flaggen-Ordner -->
<div style="margin-top:20px;">
  <a href="#" id="show-flags" style="padding:10px 16px; background:#0f172a; color:#fff; border-radius:8px; text-decoration:none;">Flaggen ansehen</a>
</div>

<!-- Galerie-Bereich -->
<section id="flags-gallery" style="display:none; margin-top:20px;">
  <h2>Flaggen</h2>
  <div id="flags-msg" class="muted" style="margin-top:8px"></div>
  <div id="flags-grid" style="
      display:grid;
      grid-template-columns:repeat(auto-fill,minmax(120px,1fr));
      gap:12px;
      margin-top:12px;">
  </div>
</section>

<script>
// Klick auf den Link zeigt die Galerie
document.getElementById('show-flags').addEventListener('click', e => {
  e.preventDefault();
  const gallery = document.getElementById('flags-gallery');
  gallery.style.display = gallery.style.display === 'none' ? 'block' : 'none';
  loadFlags();
});

// Galerie laden
async function loadFlags() {
  const gallery = document.getElementById('flags-grid');
  const msg = document.getElementById('flags-msg');
  gallery.innerHTML = '';
  msg.textContent = 'Lade...';

  const owner = 'DEIN-USERNAME';
  const repo = 'DEIN-REPO';
  const path = 'images/flags';
  const branch = 'main';
  const apiUrl = `https://api.github.com/repos/${owner}/${repo}/contents/${path}?ref=${branch}`;

  try {
    const res = await fetch(apiUrl);
    if (!res.ok) throw new Error(`Fehler: ${res.status} ${res.statusText}`);
    const data = await res.json();
    const images = data
      .filter(f => f.type === 'file' && /\.(png|jpg|jpeg|gif)$/i.test(f.name))
      .map(f => ({ name: f.name, url: f.download_url }))
      .sort((a,b)=> a.name.localeCompare(b.name));

    if(images.length === 0){ msg.textContent = 'Keine Flaggen gefunden.'; return; }
    msg.textContent = `${images.length} Flagge(n) gefunden.`;

    images.forEach(img => {
      const tile = document.createElement('div');
      tile.style.textAlign = 'center';
      tile.style.padding = '6px';
      tile.style.background = 'rgba(255,255,255,0.05)';
      tile.style.borderRadius = '8px';

      const imageEl = document.createElement('img');
      imageEl.src = img.url;
      imageEl.alt = img.name;
      imageEl.loading = 'lazy';
      imageEl.style.width = '100%';
      imageEl.style.height = '100px';
      imageEl.style.objectFit = 'contain';
      imageEl.style.borderRadius = '4px';

      const caption = document.createElement('div');
      caption.textContent = img.name.replace(/\.[^.]+$/, '').toUpperCase();
      caption.style.marginTop = '6px';
      caption.style.fontWeight = '700';
      caption.style.fontSize = '0.9em';

      tile.appendChild(imageEl);
      tile.appendChild(caption);
      gallery.appendChild(tile);
    });

  } catch(err) {
    msg.textContent = err.message;
  }
}
</script>


<footer style="margin-top: 40px; color: #555; font-size: 0.9rem;">
  <p>Powered by <strong>QW</strong></p>
</footer>
</body>
</html>
